/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Category Api
 * Category Api
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod"

export const getCategoriesResponse = zod.object({
  rows: zod.array(
    zod.object({
      id: zod.number(),
      description: zod.string(),
      caption: zod.string(),
      order: zod.number().or(zod.null()),
      altNames: zod.array(
        zod.any().and(
          zod.object({
            id: zod.number(),
          }),
        ),
      ),
      media: zod.array(
        zod.object({
          id: zod.string(),
          filename: zod.string(),
          originalName: zod.string(),
          path: zod.string(),
          mimetype: zod.string(),
          order: zod.number().or(zod.null()),
          size: zod.number(),
        }),
      ),
    }),
  ),
  count: zod.number(),
})

export const createCategoriesBody = zod.object({
  caption: zod.string(),
  description: zod.string().or(zod.null()),
  isShowPhotoWithGoods: zod.boolean(),
  bgColor: zod.string(),
  color: zod.string(),
  blur: zod.number(),
  activeImageId: zod.string().or(zod.null()),
  captionPosition: zod.enum([
    "top-left",
    "top-center",
    "top-right",
    "center-left",
    "center-center",
    "center-right",
    "bottom-left",
    "bottom-center",
    "bottom-right",
  ]),
  media: zod.array(
    zod.object({
      id: zod.string(),
      filename: zod.string(),
      originalName: zod.string(),
      path: zod.string(),
      mimetype: zod.string(),
      order: zod.number().or(zod.null()),
      size: zod.number(),
    }),
  ),
  altNames: zod.array(
    zod.any().and(
      zod.object({
        id: zod.number().or(zod.string()),
        action: zod.enum(["update", "create", "remove"]).optional(),
      }),
    ),
  ),
  characteristics: zod.array(
    zod.any().and(
      zod.object({
        action: zod.enum(["create", "update", "remove"]).optional(),
        id: zod.number().or(zod.string()),
      }),
    ),
  ),
  tags: zod.array(
    zod
      .object({
        icon: zod.string().or(zod.null()),
        caption: zod.string(),
        color: zod.string(),
      })
      .and(
        zod.object({
          action: zod.enum(["create", "update", "remove"]).optional(),
          id: zod.number().or(zod.string()),
        }),
      ),
  ),
  images: zod.array(
    zod.object({
      id: zod.string(),
      caption: zod.string(),
      type: zod.string(),
      data: zod.string(),
    }),
  ),
})

export const createCategoriesResponse = zod.object({
  id: zod.number(),
  description: zod.string(),
  caption: zod.string(),
  order: zod.number().or(zod.null()),
  altNames: zod.array(
    zod.any().and(
      zod.object({
        id: zod.number(),
      }),
    ),
  ),
  media: zod.array(
    zod.object({
      id: zod.string(),
      filename: zod.string(),
      originalName: zod.string(),
      path: zod.string(),
      mimetype: zod.string(),
      order: zod.number().or(zod.null()),
      size: zod.number(),
    }),
  ),
})

export const updateCategoryParams = zod.object({
  categoryId: zod.number(),
})

export const updateCategoryBody = zod.object({
  caption: zod.string(),
  description: zod.string().or(zod.null()),
  isShowPhotoWithGoods: zod.boolean(),
  bgColor: zod.string(),
  color: zod.string(),
  blur: zod.number(),
  activeImageId: zod.string().or(zod.null()),
  captionPosition: zod.enum([
    "top-left",
    "top-center",
    "top-right",
    "center-left",
    "center-center",
    "center-right",
    "bottom-left",
    "bottom-center",
    "bottom-right",
  ]),
  media: zod.array(
    zod.object({
      id: zod.string(),
      filename: zod.string(),
      originalName: zod.string(),
      path: zod.string(),
      mimetype: zod.string(),
      order: zod.number().or(zod.null()),
      size: zod.number(),
    }),
  ),
  altNames: zod.array(
    zod.any().and(
      zod.object({
        id: zod.number().or(zod.string()),
        action: zod.enum(["update", "create", "remove"]).optional(),
      }),
    ),
  ),
  characteristics: zod.array(
    zod.any().and(
      zod.object({
        action: zod.enum(["create", "update", "remove"]).optional(),
        id: zod.number().or(zod.string()),
      }),
    ),
  ),
  tags: zod.array(
    zod
      .object({
        icon: zod.string().or(zod.null()),
        caption: zod.string(),
        color: zod.string(),
      })
      .and(
        zod.object({
          action: zod.enum(["create", "update", "remove"]).optional(),
          id: zod.number().or(zod.string()),
        }),
      ),
  ),
  images: zod.array(
    zod.object({
      id: zod.string(),
      caption: zod.string(),
      type: zod.string(),
      data: zod.string(),
    }),
  ),
})

export const updateCategoryResponse = zod.object({
  id: zod.number(),
  description: zod.string(),
  caption: zod.string(),
  order: zod.number().or(zod.null()),
  altNames: zod.array(
    zod.any().and(
      zod.object({
        id: zod.number(),
      }),
    ),
  ),
  media: zod.array(
    zod.object({
      id: zod.string(),
      filename: zod.string(),
      originalName: zod.string(),
      path: zod.string(),
      mimetype: zod.string(),
      order: zod.number().or(zod.null()),
      size: zod.number(),
    }),
  ),
})

export const getCategoryParams = zod.object({
  categoryId: zod.number(),
})

export const getCategoryResponse = zod.object({
  id: zod.number(),
  order: zod.number().or(zod.null()),
  caption: zod.string(),
  description: zod.string(),
  isShowPhotoWithGoods: zod.boolean(),
  bgColor: zod.string(),
  color: zod.string(),
  blur: zod.number(),
  activeImageId: zod.string().or(zod.null()),
  captionPosition: zod.enum([
    "top-left",
    "top-center",
    "top-right",
    "center-left",
    "center-center",
    "center-right",
    "bottom-left",
    "bottom-center",
    "bottom-right",
  ]),
  media: zod.array(
    zod.object({
      id: zod.string(),
      filename: zod.string(),
      originalName: zod.string(),
      path: zod.string(),
      mimetype: zod.string(),
      order: zod.number().or(zod.null()),
      size: zod.number(),
    }),
  ),
  altNames: zod.array(
    zod.any().and(
      zod.object({
        id: zod.number(),
      }),
    ),
  ),
  characteristics: zod.array(
    zod.any().and(
      zod.object({
        id: zod.number(),
      }),
    ),
  ),
  tags: zod.array(
    zod
      .object({
        icon: zod.string().or(zod.null()),
        caption: zod.string(),
        color: zod.string(),
      })
      .and(
        zod.object({
          id: zod.number(),
        }),
      ),
  ),
})
